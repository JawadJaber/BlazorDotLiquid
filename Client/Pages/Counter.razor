
@page "/counter"
@inject HttpClient _client
@inject IJSRuntime JS;


<h1>Test below functions to generate PDF report</h1>
<br />
<br />
<br />
<br />
<br />
<br />
<div>


    <div>
        <h5>PDF from html2pdf library</h5>
        <button class="btn btn-primary" @onclick="GetPDF1">Get Report</button>
        <br>
        <br>
        <br>
        <br>
    </div>

    <div>
        <h5>PDF from pdffromhtml library</h5>
        <button class="btn btn-primary" @onclick="GetPDF2">Get Report</button>
        <br>
        <br>
        <br>
        <br>
    </div>
   
    <div>
        <h5>PDF from NlazorDotLiquid DLL</h5>
        <button class="btn btn-outline-secondary" @onclick="GetPDF3">Get Report</button>
        <br>
        <br>
        <br>
    </div>

</div>

@convertedMarkdown


@code {
    private int currentCount = 0;

    private MarkupString convertedMarkdown;

    private void GetPDF1()
    {
        Task.Run(async () =>
        {
            var templateString = await _client.GetStringAsync("Templates\\report.lqd");

            var template = DotLiquid.Template.Parse(templateString);
            var docContext = CreateDocumentContext();
            var docString = template.Render(docContext);
            convertedMarkdown = new MarkupString(docString);

            await JS.InvokeAsync<string>("htmltopdf", "divId");
        });

    }


    private void GetPDF2()
    {
        Task.Run(async () =>
        {
            var templateString = await _client.GetStringAsync("Templates\\report.lqd");

            var template = DotLiquid.Template.Parse(templateString);
            var docContext = CreateDocumentContext();
            var docString = template.Render(docContext);
            convertedMarkdown = new MarkupString(docString);

            await JS.InvokeAsync<string>("pdffromhtml", "divId");
        });

    }


    private void GetPDF3()
    {
        Task.Run(async () =>
        {
            var templateString = await _client.GetStringAsync("Templates\\report.lqd");

            var template = DotLiquid.Template.Parse(templateString);
            var docContext = CreateDocumentContext();
            var docString = template.Render(docContext);
            convertedMarkdown = new MarkupString(docString);

            ReportFactoryJsInterop.GenerateReport(JS,"divId");
        });

    }


  


    private DotLiquid.Hash CreateDocumentContext()
    {
        var context = new
        {
            Title = "Hello, Jawad!",
            Subtitle = "Experimenting with dotLiquid, html2pdf, and Blazor",
            Steps = new List<dynamic>{
                    new { Title = "Document Context", Description = "Create data source for dotLiquid Template"},
                    new { Title = "Rendering", Description = "Load template string and render it into FlowDocument markup with Document Context given"},
                    new { Title = "Parse markup", Description = "Use XAML Parser to prepare FlowDocument instance"},
                    new { Title = "Save to XPS", Description = "Save prepared FlowDocument into XPS format"},
                    new { Title = "Convert XPS to PDF", Description = "Convert XPS to WPF using PDFSharp"},
                }
        };

        return DotLiquid.Hash.FromAnonymousObject(context);
    }
}
